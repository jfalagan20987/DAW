CREATE TABLE cars (
    car_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    model VARCHAR(100),
    brand VARCHAR(100),
    color VARCHAR(100),
    plate VARCHAR(100),
    seats INT,
    doors INT,
    fuel VARCHAR(100),
    location VARCHAR(100),
    itv VARCHAR(100),
    state VARCHAR(100),
    price_per_day INT
);

INSERT INTO cars (model, brand, color, plate, seats, doors, fuel, location, itv, state, price_per_day)
VALUES ('Auris', 'Toyota', 'blue', '3412LJM', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 80),
('Corsa', 'Opel', 'red', '4131LBN', 5, 5, 'Gasoline', 'Airport', 'Yes', 'Good', 75),
('Fiat', 'Panda', 'blue', '8021HRZ', 5, 5, 'Gasoline', 'Airport', 'Yes', 'Good', 75),
('Nissan', 'Cupra', 'white', '5621JDR', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 85),
('Toyota', 'Auris', 'black', '8921TYN', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 80),
('Nissan', 'Cupra', 'grey', '5872RTX', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 85),
('Audi', 'A3 Sportback', 'black', '8931DRS', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 90),
('Audi', 'Q3', 'beige', '4783TVC', 5, 5, 'Diesel', 'Airport', 'Yes', 'Good', 90),
('BMW', 'Serie 4 Cabrio', 'blue', '7725LKS', 4, 3, 'Diesel', 'Aiport', 'Yes', 'Good', 110),
('Mercedes', 'Vito', 'white', '4789GTX', 9, 5, 'Diesel', 'Airport', 'Yes', 'Good', 100);



CREATE TABLE customers (
	customer_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	forename VARCHAR(100),
	surname VARCHAR(100),
	nif VARCHAR(100),
	driver_license VARCHAR(100),
	address VARCHAR(100),
	email VARCHAR(100),
	phone VARCHAR(100)
);

INSERT INTO customers (forename, surname, nif, driver_license, address, email, phone)
VALUES ('Jon', 'Eidson', '21212458F', '35271113', 'Paseo Moreras 15', 'jon@gmail.com', '+34 613121415'),
('John', 'Smith', '31321131G', '41342211', 'Carrer Forn 12', 'john@gmail.com', '+34 611215162'),
('Alex', 'Caruso', '42365432D', '84563274', 'Address 1', 'acaruso@gmail.com', '+34 658744496'),
('Isaiah', 'Hartenstein', '84475662G', '99651147', 'Address 2', 'ihart@gmail.com', '+34 632147856'),
('Chet', 'Holmgren', '87432243T', '33417776', 'Address 3', 'chet@gmail.com', '+34 687221158'),
('Aaron', 'Wiggins', '41515648B', '44117655', 'Tulsa St, 5', 'awiggs@gmail.com', '+34 611859754'),
('Isaiah', 'Joe', '51248869X', '31119655', 'Brick Town, 17', 'izai@gmail.com', '+34 655200788'),
('Shai', 'Gilgeous-Alexander', '55217748S', '51189005', 'Aura Street, 2', 'sga@gmail.com', '+34 699578410'),
('Luguentz', 'Dort', '55289677L', '31145789', 'Lockdown Avenue, 4', 'lubeast@gmail.com', '+34 611098862'),
('Jalen', 'Williams', '41213377W', '93311578', 'New Address, 34', 'jdub@gmail.com', '+34 601227399');



CREATE TABLE reservations (
	reservation_id INT NOT NULL AUTO_INCREMENT,
	customer_id INT NOT NULL,
	car_id INT NOT NULL,
	date_in DATE,
	date_out DATE,
	price_per_day INT,
	PRIMARY KEY (reservation_id),
	FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
	FOREIGN KEY (car_id) REFERENCES cars(car_id)
);

INSERT INTO reservations (customer_id, car_id, date_in, date_out, price_per_day)
VALUES (1, 1, '2024-10-01', '2024-10-07', 80),
(1, 1, '2024-11-05', '2024-11-15', 80),
(1, 1, '2024-12-23', '2024-12-28', 100),
(2, 2, '2024-11-01', '2024-11-10', 75),
(3, 4, '2024-10-07', '2024-10-14', 85),
(4, 2, '2024-10-12', '2024-10-15', 75),
(2, 4, '2024-12-21', '2024-12-26', 105),
(3, 1, '2024-12-30', '2025-01-07', 100),
(4, 5, '2025-01-08', '2025-01-15', 80),
(1, 6, '2025-04-03', '2025-04-16', 85),
(8, 7, '2024-10-21', '2024-10-29', 90),
(10, 8, '2024-10-17', '2024-10-24', 90),
(6, 10, '2024-11-01', '2024-11-12', 100),
(5, 9, '2024-11-15', '2024-11-17', 110),
(7, 3, '2024-12-21', '2025-01-12', 90),
(9, 10, '2025-03-01', '2025-03-09', 100);


------------------------------------------------
------------------------------------------------
------------------------------------------------

-- Create procedure addReservation

DELIMITER $$

CREATE PROCEDURE addReservation()

BEGIN
	-- Declare variables
	DECLARE var_customer_id INT;
	DECLARE var_car_id INT;
	DECLARE var_date_in DATE;
	DECLARE var_date_out DATE;
	DECLARE var_price_per_day INT;
	
	-- Get dates
	SET var_date_in = SUBDATE(CURRENT_DATE, INTERVAL (FLOOR(1+RAND()*400)) DAY);
	SET var_date_out = DATE_ADD(var_date_in, INTERVAL (FLOOR(RAND()*7+1)) DAY);
	
	-- Get random customer
	SELECT customer_id INTO var_customer_id
	FROM customers
	ORDER BY RAND()
	LIMIT 1;
	
	-- Get an available car
	SELECT car_id INTO var_car_id
	FROM cars
	WHERE car_id NOT IN (SELECT car_id
						FROM reservations
						WHERE date_in <= var_date_out
						AND date_out >= var_date_in)
	ORDER BY RAND()
	LIMIT 1;
	
	-- Get price
	SELECT price_per_day INTO var_price_per_day
	FROM cars
	WHERE car_id = var_car_id;
	
	-- Generate the reservation
	IF var_car_id IS NOT NULL THEN
		INSERT INTO reservations (customer_id, car_id, date_in, date_out, price_per_day)
		VALUES (var_customer_id, var_car_id, var_date_in, var_date_out, var_price_per_day);
	END IF;
END$$

DELIMITER ;

------------------------------------------------------------

REPORTS:
	
-- Total income per car
CREATE VIEW cars_total_income_view AS

SELECT c.car_id, CONCAT(c.brand, ' ', c.model) AS car_name, c.plate, c.car_class, c.price_per_day, SUM(r.total_price) AS total_income
FROM cars AS c
INNER JOIN reservations_view AS r ON c.car_id = r.car_id
GROUP BY car_id
ORDER BY total_income DESC;

-- Total days a car has been rented
CREATE VIEW cars_days_rented_view AS

SELECT c.car_id, CONCAT(c.brand, ' ', c.model) AS car_name, c.plate, c.car_class, c.price_per_day, SUM(r.total_days) AS total_days
FROM cars AS c
INNER JOIN reservations_view AS r ON c.car_id = r.car_id
GROUP BY car_id
ORDER BY total_days DESC;

-- Total income per year
CREATE VIEW year_total_income_view AS

SELECT YEAR(date_in) AS year, SUM(total_price) AS total_income
FROM reservations_view
GROUP BY YEAR(date_in)
ORDER BY year DESC;

-- Total income per quarter
CREATE VIEW quarter_total_income_view AS

SELECT YEAR(date_in) AS year, QUARTER(date_in) AS quarter, SUM(total_price) AS total_income
FROM reservations_view
GROUP BY year, quarter
ORDER BY year DESC, quarter ASC;

-- Total reservations per customer
CREATE VIEW reservations_per_customer_view AS

SELECT c.customer_id, CONCAT(c.forename, ' ', UPPER(c.surname)) AS customer_name, COUNT(r.reservation_id) AS total_reservations, SUM(r.total_price) AS total_income
FROM customers AS c
INNER JOIN reservations_view AS r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_reservations DESC;



------------------------------------------------------------------
-- Special offer for cars with long inactivity

-- New view
CREATE VIEW reservations_view_specialoffers AS

SELECT r.car_id AS car_id, ADDDATE(r.date_out, INTERVAL 1 DAY) AS free_date_in,
	(SELECT SUBDATE(re.date_in, INTERVAL 1 DAY)
	FROM reservations AS re
	WHERE re.car_id = r.car_id AND re.date_in > r.date_out
	ORDER BY re.date_in ASC
	LIMIT 1) AS free_date_out,
	(SELECT c.price_per_day
	FROM cars AS c
	WHERE c.car_id = r.car_id) AS price_per_day,
	(SELECT DATEDIFF(free_date_in, CURRENT_DATE)
    FROM reservations
    WHERE DATEDIFF(free_date_in, CURRENT_DATE) > 0
    LIMIT 1) AS days_until_free_date_in
FROM reservations AS r
WHERE ADDDATE(r.date_out, INTERVAL 1 DAY) > CURRENT_DATE
ORDER BY r.car_id, free_date_in;


CREATE VIEW specialoffers_view AS

SELECT car_id, free_date_in, free_date_out, price_per_day, days_until_free_date_in,
	(specialDiscount(days_until_free_date_in)) AS discount,
	FLOOR(price_per_day - ((price_per_day * (specialDiscount(days_until_free_date_in))) / 100)) AS special_offer_price
FROM reservations_view_specialoffers
WHERE days_until_free_date_in <= 15;


-- Stored function to calculate de special offer's discount (CASE)
DELIMITER $$

CREATE FUNCTION specialDiscount2(var_days_until_free_date INT)
RETURNS INT
DETERMINISTIC

BEGIN
	-- Variables
	DECLARE var_discount INT;
	
	-- case
	IF var_days_until_free_date <= 2 AND var_days_until_free_date > 0 THEN
		SET var_discount = 40;
	ELSEIF var_days_until_free_date <= 5 AND var_days_until_free_date > 2 THEN 
		SET var_discount = 30;
	ELSEIF var_days_until_free_date <= 10 AND var_days_until_free_date > 5 THEN
		SET var_discount = 20;
	ELSE SET var_discount = 10;
	END IF;
	RETURN (var_discount);
END$$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE showCarsFreeDates()

BEGIN
	
END$$

DELIMITER ;


*****
EXTENSIÓ

<xs:complexType name="extensio1">
	<xs:simpleContent>
		<xs:extension base:"xs:string">
			<xs:attribute name="atribut1" type="xs:positiveInteger" use="required"/>
		</xs:extension>
	</xs:simpleContent>
</xs:complexType>


RESTRICCIÓ
<xs:simpleType name="restriccio1">
	<xs:restriction base="xs:string">
		<xs:enumeration value="">
		<xs:pattern>
		<xs:totalDigits>
		<xs:fractionDigits>
		<xs:maxInclusive>
		<xs:maxExclusive>
		
	</xs:restriction>
</xs:simpleType>


PATTERN ID PRODUCTE

prod[0-9]{1,2}[a-zA-Z]